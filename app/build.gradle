apply from: "${rootProject.rootDir}/default_config.gradle"
apply plugin: 'com.android.application'
project.ext.setAppDefaultConfig project

android {
    defaultConfig {
        applicationId "com.example.modulesdemo"
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // 定义编译时的参数，可以在Java中通过BuildConfig获取对应的值
        buildConfigField("String", "CHANNEL", "\"channel\"")
        buildConfigField("String", "VERSION", "\"version\"")
        buildConfigField("boolean", "IS_RELEASE", "true")
    }
    buildTypes {
        release {
            //启用代码压缩，混淆，优化
            minifyEnabled true
            // 去掉无用的资源和代码文件，需要设置 minifyEnabled true
            shrinkResources true
            //用于配置manifest中的meta数据
            manifestPlaceholders = [
                    channel : "666",
                    version : "2.2",
                    app_name: "app_name" //需要在  AndroidManifest中配置 tools:replace="android:label"
            ]
            // 可以直接在BuildConfig.APP_NAME获取
            buildConfigField("String", "APP_NAME", "\"release\"")
            // 在default_config.gradle中配置全局签名
//            signingConfig signingConfigs.release
            //ProGuard规则文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            manifestPlaceholders = [
                    channel : "666",
                    version : "2.2",
                    app_name: "app_name"
            ]
            buildConfigField("String", "APP_NAME", "\"debug\"")
            // 在根路径下的 gradle.properties 中配置AppKey的值
            buildConfigField("String", "APP_KEY", "\"${AppKey}\"")
        }
    }
    flavorDimensions 'type'
    productFlavors {
        client {
            dimension "type"  //控制风味的维度，用于交叉编译
            manifestPlaceholders = [
                    channel : "333",
                    version : "3.3",
                    app_name: "client"
            ]
        }
        server {
            dimension "type"
            manifestPlaceholders = [
                    channel : "666",
                    version : "6.6",
                    app_name: "server"
            ]
        }
    }
    sourceSets {
        main {}
    }
}
// 可以定制单独的依赖
dependencies {
}